// (LeetCode): 455. 分发饼干
/* 
假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。
对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] >= g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。
 
示例 1:
输入: g = [1,2,3], s = [1,1]
输出: 1
解释: 
你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。
虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。
所以你应该输出1。
*/

/* 
思路
局部最优: 既能满足孩子, 还消耗最少
先将 "较小的饼干" 分给 "胃口最小" 的孩子

步骤
1. 对饼干数组和胃口数组进行升序排序
2. 遍历饼干数组, 找到能满足第一个孩子的饼干
3. 然后继续遍历饼干数组, 找到满足第二、三、...、n 个孩子的饼干
*/

/**
 * @param {number[]} g
 * @param {number[]} s
 * @return {number}
 * 时间复杂度 O(nlogN)
 * 空间复杂度 O(1)
 */
var findContentChildren = function (g, s) {
  g.sort((a, b) => a - b);
  s.sort((a, b) => a - b);

  let i = 0;
  s.forEach((n) => {
    if (n >= g[i]) i += 1;
  });

  return i;
};
