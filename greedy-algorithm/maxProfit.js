// (LeetCode): 122. 买卖股票的最佳时机 II
/* 
给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。
注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例 1:
输入: [7,1,5,3,6,4]
输出: 7
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
*/

/* 
思路
前提: 上帝视角, 知道未来的价格
局部最优: 见好就收, 见差就不动, 不做任何长远打算

步骤
1. 新建一个变量, 用来统计总共利润
2. 遍历价格数组, 如果当前价格比昨天高, 就在昨天买, 今天卖, 否则不交易
3. 遍历结束后, 返回所有利润之和
*/

/**
 * @param {number[]} prices
 * @return {number}
 * 时间复杂度 O(n)
 * 空间复杂度 O(1)
 */
var maxProfit = function (prices) {
  let profit = 0;
  for (let i = 0; i < prices.length; i += 1) {
    if (prices[i] > prices[i - 1]) {
      profit += prices[i] - prices[i - 1];
    }
  }
  return profit;
};
